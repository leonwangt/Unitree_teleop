// Generated by gencpp from file iserve_msgs/JointState.msg
// DO NOT EDIT!


#ifndef ISERVE_MSGS_MESSAGE_JOINTSTATE_H
#define ISERVE_MSGS_MESSAGE_JOINTSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace iserve_msgs
{
template <class ContainerAllocator>
struct JointState_
{
  typedef JointState_<ContainerAllocator> Type;

  JointState_()
    : header()
    , seq(0)
    , stamp()
    , frame_id()
    , name()
    , position()
    , velocity()
    , effort()
    , external_torque()
    , voltage()
    , current()
    , temperature()
    , brake_state()  {
    }
  JointState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , seq(0)
    , stamp()
    , frame_id(_alloc)
    , name(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , effort(_alloc)
    , external_torque(_alloc)
    , voltage(_alloc)
    , current(_alloc)
    , temperature(_alloc)
    , brake_state(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _seq_type;
  _seq_type seq;

   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _frame_id_type;
  _frame_id_type frame_id;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _name_type;
  _name_type name;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _position_type;
  _position_type position;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _velocity_type;
  _velocity_type velocity;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _effort_type;
  _effort_type effort;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _external_torque_type;
  _external_torque_type external_torque;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _voltage_type;
  _voltage_type voltage;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _current_type;
  _current_type current;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _temperature_type;
  _temperature_type temperature;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _brake_state_type;
  _brake_state_type brake_state;





  typedef boost::shared_ptr< ::iserve_msgs::JointState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_msgs::JointState_<ContainerAllocator> const> ConstPtr;

}; // struct JointState_

typedef ::iserve_msgs::JointState_<std::allocator<void> > JointState;

typedef boost::shared_ptr< ::iserve_msgs::JointState > JointStatePtr;
typedef boost::shared_ptr< ::iserve_msgs::JointState const> JointStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_msgs::JointState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_msgs::JointState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_msgs::JointState_<ContainerAllocator1> & lhs, const ::iserve_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.seq == rhs.seq &&
    lhs.stamp == rhs.stamp &&
    lhs.frame_id == rhs.frame_id &&
    lhs.name == rhs.name &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.effort == rhs.effort &&
    lhs.external_torque == rhs.external_torque &&
    lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.temperature == rhs.temperature &&
    lhs.brake_state == rhs.brake_state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_msgs::JointState_<ContainerAllocator1> & lhs, const ::iserve_msgs::JointState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_msgs::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_msgs::JointState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_msgs::JointState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_msgs::JointState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_msgs::JointState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_msgs::JointState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09af6ac4908a6c22cdcc32f5645453ed";
  }

  static const char* value(const ::iserve_msgs::JointState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09af6ac4908a6c22ULL;
  static const uint64_t static_value2 = 0xcdcc32f5645453edULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_msgs/JointState";
  }

  static const char* value(const ::iserve_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_msgs::JointState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"  uint32 seq\n"
"  time stamp\n"
"  string frame_id\n"
"string[]  name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
"float64[] external_torque\n"
"\n"
"float64[] voltage\n"
"float64[] current\n"
"int32[]   temperature\n"
"int32[]   brake_state\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::iserve_msgs::JointState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_msgs::JointState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.seq);
      stream.next(m.stamp);
      stream.next(m.frame_id);
      stream.next(m.name);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.effort);
      stream.next(m.external_torque);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.temperature);
      stream.next(m.brake_state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_msgs::JointState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_msgs::JointState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "seq: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.seq);
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.frame_id);
    s << indent << "name[]" << std::endl;
    for (size_t i = 0; i < v.name.size(); ++i)
    {
      s << indent << "  name[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.velocity[i]);
    }
    s << indent << "effort[]" << std::endl;
    for (size_t i = 0; i < v.effort.size(); ++i)
    {
      s << indent << "  effort[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.effort[i]);
    }
    s << indent << "external_torque[]" << std::endl;
    for (size_t i = 0; i < v.external_torque.size(); ++i)
    {
      s << indent << "  external_torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.external_torque[i]);
    }
    s << indent << "voltage[]" << std::endl;
    for (size_t i = 0; i < v.voltage.size(); ++i)
    {
      s << indent << "  voltage[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.voltage[i]);
    }
    s << indent << "current[]" << std::endl;
    for (size_t i = 0; i < v.current.size(); ++i)
    {
      s << indent << "  current[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.current[i]);
    }
    s << indent << "temperature[]" << std::endl;
    for (size_t i = 0; i < v.temperature.size(); ++i)
    {
      s << indent << "  temperature[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.temperature[i]);
    }
    s << indent << "brake_state[]" << std::endl;
    for (size_t i = 0; i < v.brake_state.size(); ++i)
    {
      s << indent << "  brake_state[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.brake_state[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_MSGS_MESSAGE_JOINTSTATE_H
