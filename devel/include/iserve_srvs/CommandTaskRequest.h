// Generated by gencpp from file iserve_srvs/CommandTaskRequest.msg
// DO NOT EDIT!


#ifndef ISERVE_SRVS_MESSAGE_COMMANDTASKREQUEST_H
#define ISERVE_SRVS_MESSAGE_COMMANDTASKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iserve_srvs
{
template <class ContainerAllocator>
struct CommandTaskRequest_
{
  typedef CommandTaskRequest_<ContainerAllocator> Type;

  CommandTaskRequest_()
    : task_id()
    , plan_type()
    , commandVel(0.0)
    , waypoints()
    , timeStamps()
    , operation_mode(0)
    , isFileTask(false)
    , isCartesian(false)
    , directCommand()
    , isWaitFinish(false)  {
    }
  CommandTaskRequest_(const ContainerAllocator& _alloc)
    : task_id(_alloc)
    , plan_type(_alloc)
    , commandVel(0.0)
    , waypoints(_alloc)
    , timeStamps(_alloc)
    , operation_mode(0)
    , isFileTask(false)
    , isCartesian(false)
    , directCommand(_alloc)
    , isWaitFinish(false)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _task_id_type;
  _task_id_type task_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _plan_type_type;
  _plan_type_type plan_type;

   typedef double _commandVel_type;
  _commandVel_type commandVel;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _waypoints_type;
  _waypoints_type waypoints;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _timeStamps_type;
  _timeStamps_type timeStamps;

   typedef int32_t _operation_mode_type;
  _operation_mode_type operation_mode;

   typedef uint8_t _isFileTask_type;
  _isFileTask_type isFileTask;

   typedef uint8_t _isCartesian_type;
  _isCartesian_type isCartesian;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _directCommand_type;
  _directCommand_type directCommand;

   typedef uint8_t _isWaitFinish_type;
  _isWaitFinish_type isWaitFinish;





  typedef boost::shared_ptr< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct CommandTaskRequest_

typedef ::iserve_srvs::CommandTaskRequest_<std::allocator<void> > CommandTaskRequest;

typedef boost::shared_ptr< ::iserve_srvs::CommandTaskRequest > CommandTaskRequestPtr;
typedef boost::shared_ptr< ::iserve_srvs::CommandTaskRequest const> CommandTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_srvs::CommandTaskRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::CommandTaskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.task_id == rhs.task_id &&
    lhs.plan_type == rhs.plan_type &&
    lhs.commandVel == rhs.commandVel &&
    lhs.waypoints == rhs.waypoints &&
    lhs.timeStamps == rhs.timeStamps &&
    lhs.operation_mode == rhs.operation_mode &&
    lhs.isFileTask == rhs.isFileTask &&
    lhs.isCartesian == rhs.isCartesian &&
    lhs.directCommand == rhs.directCommand &&
    lhs.isWaitFinish == rhs.isWaitFinish;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_srvs::CommandTaskRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::CommandTaskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "20900e4ff1dba6ccd8bfb55d3879360c";
  }

  static const char* value(const ::iserve_srvs::CommandTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x20900e4ff1dba6ccULL;
  static const uint64_t static_value2 = 0xd8bfb55d3879360cULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_srvs/CommandTaskRequest";
  }

  static const char* value(const ::iserve_srvs::CommandTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string task_id\n"
"string plan_type\n"
"float64 commandVel\n"
"float64[] waypoints\n"
"float64[] timeStamps\n"
"int32 operation_mode\n"
"# if move the arm according to the record file\n"
"bool isFileTask\n"
"bool isCartesian\n"
"float64[] directCommand\n"
"bool isWaitFinish\n"
;
  }

  static const char* value(const ::iserve_srvs::CommandTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.plan_type);
      stream.next(m.commandVel);
      stream.next(m.waypoints);
      stream.next(m.timeStamps);
      stream.next(m.operation_mode);
      stream.next(m.isFileTask);
      stream.next(m.isCartesian);
      stream.next(m.directCommand);
      stream.next(m.isWaitFinish);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CommandTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_srvs::CommandTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_srvs::CommandTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.task_id);
    s << indent << "plan_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.plan_type);
    s << indent << "commandVel: ";
    Printer<double>::stream(s, indent + "  ", v.commandVel);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.waypoints[i]);
    }
    s << indent << "timeStamps[]" << std::endl;
    for (size_t i = 0; i < v.timeStamps.size(); ++i)
    {
      s << indent << "  timeStamps[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.timeStamps[i]);
    }
    s << indent << "operation_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.operation_mode);
    s << indent << "isFileTask: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isFileTask);
    s << indent << "isCartesian: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isCartesian);
    s << indent << "directCommand[]" << std::endl;
    for (size_t i = 0; i < v.directCommand.size(); ++i)
    {
      s << indent << "  directCommand[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.directCommand[i]);
    }
    s << indent << "isWaitFinish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isWaitFinish);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_SRVS_MESSAGE_COMMANDTASKREQUEST_H
