// Generated by gencpp from file iserve_srvs/PlanSwitchResponse.msg
// DO NOT EDIT!


#ifndef ISERVE_SRVS_MESSAGE_PLANSWITCHRESPONSE_H
#define ISERVE_SRVS_MESSAGE_PLANSWITCHRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iserve_srvs
{
template <class ContainerAllocator>
struct PlanSwitchResponse_
{
  typedef PlanSwitchResponse_<ContainerAllocator> Type;

  PlanSwitchResponse_()
    : success(false)
    , message()
    , waypoints()  {
    }
  PlanSwitchResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , message(_alloc)
    , waypoints(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _waypoints_type;
  _waypoints_type waypoints;





  typedef boost::shared_ptr< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> const> ConstPtr;

}; // struct PlanSwitchResponse_

typedef ::iserve_srvs::PlanSwitchResponse_<std::allocator<void> > PlanSwitchResponse;

typedef boost::shared_ptr< ::iserve_srvs::PlanSwitchResponse > PlanSwitchResponsePtr;
typedef boost::shared_ptr< ::iserve_srvs::PlanSwitchResponse const> PlanSwitchResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator1> & lhs, const ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.message == rhs.message &&
    lhs.waypoints == rhs.waypoints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator1> & lhs, const ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "773867baf99f509801542161dfb1883a";
  }

  static const char* value(const ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x773867baf99f5098ULL;
  static const uint64_t static_value2 = 0x01542161dfb1883aULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_srvs/PlanSwitchResponse";
  }

  static const char* value(const ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string message\n"
"float64[] waypoints\n"
;
  }

  static const char* value(const ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.waypoints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanSwitchResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_srvs::PlanSwitchResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "waypoints[]" << std::endl;
    for (size_t i = 0; i < v.waypoints.size(); ++i)
    {
      s << indent << "  waypoints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.waypoints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_SRVS_MESSAGE_PLANSWITCHRESPONSE_H
