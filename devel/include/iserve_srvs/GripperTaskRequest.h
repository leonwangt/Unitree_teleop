// Generated by gencpp from file iserve_srvs/GripperTaskRequest.msg
// DO NOT EDIT!


#ifndef ISERVE_SRVS_MESSAGE_GRIPPERTASKREQUEST_H
#define ISERVE_SRVS_MESSAGE_GRIPPERTASKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iserve_srvs
{
template <class ContainerAllocator>
struct GripperTaskRequest_
{
  typedef GripperTaskRequest_<ContainerAllocator> Type;

  GripperTaskRequest_()
    : isWaitFinish(false)
    , gripper_mode(0)
    , command_cur(0.0)
    , command_pos(0.0)  {
    }
  GripperTaskRequest_(const ContainerAllocator& _alloc)
    : isWaitFinish(false)
    , gripper_mode(0)
    , command_cur(0.0)
    , command_pos(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _isWaitFinish_type;
  _isWaitFinish_type isWaitFinish;

   typedef int32_t _gripper_mode_type;
  _gripper_mode_type gripper_mode;

   typedef double _command_cur_type;
  _command_cur_type command_cur;

   typedef double _command_pos_type;
  _command_pos_type command_pos;





  typedef boost::shared_ptr< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GripperTaskRequest_

typedef ::iserve_srvs::GripperTaskRequest_<std::allocator<void> > GripperTaskRequest;

typedef boost::shared_ptr< ::iserve_srvs::GripperTaskRequest > GripperTaskRequestPtr;
typedef boost::shared_ptr< ::iserve_srvs::GripperTaskRequest const> GripperTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_srvs::GripperTaskRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::GripperTaskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.isWaitFinish == rhs.isWaitFinish &&
    lhs.gripper_mode == rhs.gripper_mode &&
    lhs.command_cur == rhs.command_cur &&
    lhs.command_pos == rhs.command_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_srvs::GripperTaskRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::GripperTaskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fde54d0d0e21c7edfcdb01d56a2d895b";
  }

  static const char* value(const ::iserve_srvs::GripperTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfde54d0d0e21c7edULL;
  static const uint64_t static_value2 = 0xfcdb01d56a2d895bULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_srvs/GripperTaskRequest";
  }

  static const char* value(const ::iserve_srvs::GripperTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool isWaitFinish\n"
"int32 gripper_mode\n"
"float64 command_cur\n"
"float64 command_pos\n"
;
  }

  static const char* value(const ::iserve_srvs::GripperTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.isWaitFinish);
      stream.next(m.gripper_mode);
      stream.next(m.command_cur);
      stream.next(m.command_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_srvs::GripperTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_srvs::GripperTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "isWaitFinish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isWaitFinish);
    s << indent << "gripper_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.gripper_mode);
    s << indent << "command_cur: ";
    Printer<double>::stream(s, indent + "  ", v.command_cur);
    s << indent << "command_pos: ";
    Printer<double>::stream(s, indent + "  ", v.command_pos);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_SRVS_MESSAGE_GRIPPERTASKREQUEST_H
