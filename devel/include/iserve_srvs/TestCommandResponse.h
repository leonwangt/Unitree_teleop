// Generated by gencpp from file iserve_srvs/TestCommandResponse.msg
// DO NOT EDIT!


#ifndef ISERVE_SRVS_MESSAGE_TESTCOMMANDRESPONSE_H
#define ISERVE_SRVS_MESSAGE_TESTCOMMANDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iserve_srvs
{
template <class ContainerAllocator>
struct TestCommandResponse_
{
  typedef TestCommandResponse_<ContainerAllocator> Type;

  TestCommandResponse_()
    : success(false)
    , testItem()
    , isLoad(false)
    , cycleTimes(0)
    , velocity(0.0)
    , isSingleJoint(false)
    , jointNo(0)
    , segmentNo()
    , pointIndex(0)
    , startIndex(0)
    , endIndex(0)  {
    }
  TestCommandResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , testItem(_alloc)
    , isLoad(false)
    , cycleTimes(0)
    , velocity(0.0)
    , isSingleJoint(false)
    , jointNo(0)
    , segmentNo(_alloc)
    , pointIndex(0)
    , startIndex(0)
    , endIndex(0)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _testItem_type;
  _testItem_type testItem;

   typedef uint8_t _isLoad_type;
  _isLoad_type isLoad;

   typedef int32_t _cycleTimes_type;
  _cycleTimes_type cycleTimes;

   typedef double _velocity_type;
  _velocity_type velocity;

   typedef uint8_t _isSingleJoint_type;
  _isSingleJoint_type isSingleJoint;

   typedef int32_t _jointNo_type;
  _jointNo_type jointNo;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _segmentNo_type;
  _segmentNo_type segmentNo;

   typedef int32_t _pointIndex_type;
  _pointIndex_type pointIndex;

   typedef int32_t _startIndex_type;
  _startIndex_type startIndex;

   typedef int32_t _endIndex_type;
  _endIndex_type endIndex;





  typedef boost::shared_ptr< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> const> ConstPtr;

}; // struct TestCommandResponse_

typedef ::iserve_srvs::TestCommandResponse_<std::allocator<void> > TestCommandResponse;

typedef boost::shared_ptr< ::iserve_srvs::TestCommandResponse > TestCommandResponsePtr;
typedef boost::shared_ptr< ::iserve_srvs::TestCommandResponse const> TestCommandResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_srvs::TestCommandResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_srvs::TestCommandResponse_<ContainerAllocator1> & lhs, const ::iserve_srvs::TestCommandResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.testItem == rhs.testItem &&
    lhs.isLoad == rhs.isLoad &&
    lhs.cycleTimes == rhs.cycleTimes &&
    lhs.velocity == rhs.velocity &&
    lhs.isSingleJoint == rhs.isSingleJoint &&
    lhs.jointNo == rhs.jointNo &&
    lhs.segmentNo == rhs.segmentNo &&
    lhs.pointIndex == rhs.pointIndex &&
    lhs.startIndex == rhs.startIndex &&
    lhs.endIndex == rhs.endIndex;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_srvs::TestCommandResponse_<ContainerAllocator1> & lhs, const ::iserve_srvs::TestCommandResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ed57eefe99697913fd727b43196556f";
  }

  static const char* value(const ::iserve_srvs::TestCommandResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ed57eefe9969791ULL;
  static const uint64_t static_value2 = 0x3fd727b43196556fULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_srvs/TestCommandResponse";
  }

  static const char* value(const ::iserve_srvs::TestCommandResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string testItem\n"
"bool isLoad\n"
"int32 cycleTimes\n"
"float64 velocity\n"
"bool isSingleJoint\n"
"int32 jointNo\n"
"string segmentNo\n"
"int32 pointIndex\n"
"int32 startIndex\n"
"int32 endIndex\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::iserve_srvs::TestCommandResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.testItem);
      stream.next(m.isLoad);
      stream.next(m.cycleTimes);
      stream.next(m.velocity);
      stream.next(m.isSingleJoint);
      stream.next(m.jointNo);
      stream.next(m.segmentNo);
      stream.next(m.pointIndex);
      stream.next(m.startIndex);
      stream.next(m.endIndex);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TestCommandResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_srvs::TestCommandResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_srvs::TestCommandResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "testItem: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.testItem);
    s << indent << "isLoad: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isLoad);
    s << indent << "cycleTimes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cycleTimes);
    s << indent << "velocity: ";
    Printer<double>::stream(s, indent + "  ", v.velocity);
    s << indent << "isSingleJoint: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isSingleJoint);
    s << indent << "jointNo: ";
    Printer<int32_t>::stream(s, indent + "  ", v.jointNo);
    s << indent << "segmentNo: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.segmentNo);
    s << indent << "pointIndex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.pointIndex);
    s << indent << "startIndex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.startIndex);
    s << indent << "endIndex: ";
    Printer<int32_t>::stream(s, indent + "  ", v.endIndex);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_SRVS_MESSAGE_TESTCOMMANDRESPONSE_H
