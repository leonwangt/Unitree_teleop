// Generated by gencpp from file iserve_srvs/DeliveryRobotTaskRequest.msg
// DO NOT EDIT!


#ifndef ISERVE_SRVS_MESSAGE_DELIVERYROBOTTASKREQUEST_H
#define ISERVE_SRVS_MESSAGE_DELIVERYROBOTTASKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iserve_srvs
{
template <class ContainerAllocator>
struct DeliveryRobotTaskRequest_
{
  typedef DeliveryRobotTaskRequest_<ContainerAllocator> Type;

  DeliveryRobotTaskRequest_()
    : switch_on(false)
    , scene_id(0)
    , look_id(0)
    , place_id(0)
    , object_name()
    , speed_scale(0.0)  {
    }
  DeliveryRobotTaskRequest_(const ContainerAllocator& _alloc)
    : switch_on(false)
    , scene_id(0)
    , look_id(0)
    , place_id(0)
    , object_name(_alloc)
    , speed_scale(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _switch_on_type;
  _switch_on_type switch_on;

   typedef int32_t _scene_id_type;
  _scene_id_type scene_id;

   typedef int32_t _look_id_type;
  _look_id_type look_id;

   typedef int32_t _place_id_type;
  _place_id_type place_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_name_type;
  _object_name_type object_name;

   typedef double _speed_scale_type;
  _speed_scale_type speed_scale;





  typedef boost::shared_ptr< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DeliveryRobotTaskRequest_

typedef ::iserve_srvs::DeliveryRobotTaskRequest_<std::allocator<void> > DeliveryRobotTaskRequest;

typedef boost::shared_ptr< ::iserve_srvs::DeliveryRobotTaskRequest > DeliveryRobotTaskRequestPtr;
typedef boost::shared_ptr< ::iserve_srvs::DeliveryRobotTaskRequest const> DeliveryRobotTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.switch_on == rhs.switch_on &&
    lhs.scene_id == rhs.scene_id &&
    lhs.look_id == rhs.look_id &&
    lhs.place_id == rhs.place_id &&
    lhs.object_name == rhs.object_name &&
    lhs.speed_scale == rhs.speed_scale;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8ca3ea91120e66a6e1d8b1ec95d2107b";
  }

  static const char* value(const ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8ca3ea91120e66a6ULL;
  static const uint64_t static_value2 = 0xe1d8b1ec95d2107bULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_srvs/DeliveryRobotTaskRequest";
  }

  static const char* value(const ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool switch_on       #该次服务调用是否有效\n"
"int32 scene_id       #场景id\n"
"int32 look_id      #对几号抽屉进行抓放\n"
"int32 place_id       #对抽屉的几号放置位进行放置\n"
"string object_name   #抓取物体的名称\n"
"float64 speed_scale  #用于调速，高中低三挡\n"
;
  }

  static const char* value(const ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.switch_on);
      stream.next(m.scene_id);
      stream.next(m.look_id);
      stream.next(m.place_id);
      stream.next(m.object_name);
      stream.next(m.speed_scale);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DeliveryRobotTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_srvs::DeliveryRobotTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "switch_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.switch_on);
    s << indent << "scene_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.scene_id);
    s << indent << "look_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.look_id);
    s << indent << "place_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.place_id);
    s << indent << "object_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_name);
    s << indent << "speed_scale: ";
    Printer<double>::stream(s, indent + "  ", v.speed_scale);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_SRVS_MESSAGE_DELIVERYROBOTTASKREQUEST_H
