// Generated by gencpp from file iserve_srvs/ImpedanceTaskRequest.msg
// DO NOT EDIT!


#ifndef ISERVE_SRVS_MESSAGE_IMPEDANCETASKREQUEST_H
#define ISERVE_SRVS_MESSAGE_IMPEDANCETASKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iserve_srvs
{
template <class ContainerAllocator>
struct ImpedanceTaskRequest_
{
  typedef ImpedanceTaskRequest_<ContainerAllocator> Type;

  ImpedanceTaskRequest_()
    : swith_on(false)
    , control_flag()  {
    }
  ImpedanceTaskRequest_(const ContainerAllocator& _alloc)
    : swith_on(false)
    , control_flag(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _swith_on_type;
  _swith_on_type swith_on;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _control_flag_type;
  _control_flag_type control_flag;





  typedef boost::shared_ptr< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ImpedanceTaskRequest_

typedef ::iserve_srvs::ImpedanceTaskRequest_<std::allocator<void> > ImpedanceTaskRequest;

typedef boost::shared_ptr< ::iserve_srvs::ImpedanceTaskRequest > ImpedanceTaskRequestPtr;
typedef boost::shared_ptr< ::iserve_srvs::ImpedanceTaskRequest const> ImpedanceTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.swith_on == rhs.swith_on &&
    lhs.control_flag == rhs.control_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7cb76790dca58d15273a3fdceca7923";
  }

  static const char* value(const ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7cb76790dca58d1ULL;
  static const uint64_t static_value2 = 0x5273a3fdceca7923ULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_srvs/ImpedanceTaskRequest";
  }

  static const char* value(const ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool swith_on\n"
"int32[] control_flag\n"
;
  }

  static const char* value(const ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.swith_on);
      stream.next(m.control_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ImpedanceTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_srvs::ImpedanceTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "swith_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swith_on);
    s << indent << "control_flag[]" << std::endl;
    for (size_t i = 0; i < v.control_flag.size(); ++i)
    {
      s << indent << "  control_flag[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.control_flag[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_SRVS_MESSAGE_IMPEDANCETASKREQUEST_H
