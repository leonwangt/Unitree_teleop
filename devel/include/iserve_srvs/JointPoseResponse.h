// Generated by gencpp from file iserve_srvs/JointPoseResponse.msg
// DO NOT EDIT!


#ifndef ISERVE_SRVS_MESSAGE_JOINTPOSERESPONSE_H
#define ISERVE_SRVS_MESSAGE_JOINTPOSERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Transform.h>

namespace iserve_srvs
{
template <class ContainerAllocator>
struct JointPoseResponse_
{
  typedef JointPoseResponse_<ContainerAllocator> Type;

  JointPoseResponse_()
    : reference_frame()
    , success(false)
    , transform()  {
    }
  JointPoseResponse_(const ContainerAllocator& _alloc)
    : reference_frame(_alloc)
    , success(false)
    , transform(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _reference_frame_type;
  _reference_frame_type reference_frame;

   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::geometry_msgs::Transform_<ContainerAllocator>  _transform_type;
  _transform_type transform;





  typedef boost::shared_ptr< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct JointPoseResponse_

typedef ::iserve_srvs::JointPoseResponse_<std::allocator<void> > JointPoseResponse;

typedef boost::shared_ptr< ::iserve_srvs::JointPoseResponse > JointPoseResponsePtr;
typedef boost::shared_ptr< ::iserve_srvs::JointPoseResponse const> JointPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_srvs::JointPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_srvs::JointPoseResponse_<ContainerAllocator1> & lhs, const ::iserve_srvs::JointPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.reference_frame == rhs.reference_frame &&
    lhs.success == rhs.success &&
    lhs.transform == rhs.transform;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_srvs::JointPoseResponse_<ContainerAllocator1> & lhs, const ::iserve_srvs::JointPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5bc5c59ee74eb3d525b9bdfef7053220";
  }

  static const char* value(const ::iserve_srvs::JointPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5bc5c59ee74eb3d5ULL;
  static const uint64_t static_value2 = 0x25b9bdfef7053220ULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_srvs/JointPoseResponse";
  }

  static const char* value(const ::iserve_srvs::JointPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string reference_frame\n"
"bool success\n"
"geometry_msgs/Transform transform\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Transform\n"
"# This represents the transform between two coordinate frames in free space.\n"
"\n"
"Vector3 translation\n"
"Quaternion rotation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::iserve_srvs::JointPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.reference_frame);
      stream.next(m.success);
      stream.next(m.transform);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_srvs::JointPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_srvs::JointPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "reference_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.reference_frame);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "transform: ";
    s << std::endl;
    Printer< ::geometry_msgs::Transform_<ContainerAllocator> >::stream(s, indent + "  ", v.transform);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_SRVS_MESSAGE_JOINTPOSERESPONSE_H
