// Generated by gencpp from file iserve_srvs/Enable_cv_anmoResponse.msg
// DO NOT EDIT!


#ifndef ISERVE_SRVS_MESSAGE_ENABLE_CV_ANMORESPONSE_H
#define ISERVE_SRVS_MESSAGE_ENABLE_CV_ANMORESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iserve_srvs
{
template <class ContainerAllocator>
struct Enable_cv_anmoResponse_
{
  typedef Enable_cv_anmoResponse_<ContainerAllocator> Type;

  Enable_cv_anmoResponse_()
    : ok(false)  {
    }
  Enable_cv_anmoResponse_(const ContainerAllocator& _alloc)
    : ok(false)  {
  (void)_alloc;
    }



   typedef uint8_t _ok_type;
  _ok_type ok;





  typedef boost::shared_ptr< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> const> ConstPtr;

}; // struct Enable_cv_anmoResponse_

typedef ::iserve_srvs::Enable_cv_anmoResponse_<std::allocator<void> > Enable_cv_anmoResponse;

typedef boost::shared_ptr< ::iserve_srvs::Enable_cv_anmoResponse > Enable_cv_anmoResponsePtr;
typedef boost::shared_ptr< ::iserve_srvs::Enable_cv_anmoResponse const> Enable_cv_anmoResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator1> & lhs, const ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ok == rhs.ok;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator1> & lhs, const ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f6da3883749771fac40d6deb24a8c02";
  }

  static const char* value(const ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f6da3883749771fULL;
  static const uint64_t static_value2 = 0xac40d6deb24a8c02ULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_srvs/Enable_cv_anmoResponse";
  }

  static const char* value(const ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ok\n"
"\n"
;
  }

  static const char* value(const ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ok);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Enable_cv_anmoResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_srvs::Enable_cv_anmoResponse_<ContainerAllocator>& v)
  {
    s << indent << "ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ok);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_SRVS_MESSAGE_ENABLE_CV_ANMORESPONSE_H
