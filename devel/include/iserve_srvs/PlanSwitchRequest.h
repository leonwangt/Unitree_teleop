// Generated by gencpp from file iserve_srvs/PlanSwitchRequest.msg
// DO NOT EDIT!


#ifndef ISERVE_SRVS_MESSAGE_PLANSWITCHREQUEST_H
#define ISERVE_SRVS_MESSAGE_PLANSWITCHREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace iserve_srvs
{
template <class ContainerAllocator>
struct PlanSwitchRequest_
{
  typedef PlanSwitchRequest_<ContainerAllocator> Type;

  PlanSwitchRequest_()
    : swith_on(false)
    , end_pose()
    , joint_pos()  {
    }
  PlanSwitchRequest_(const ContainerAllocator& _alloc)
    : swith_on(false)
    , end_pose(_alloc)
    , joint_pos(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _swith_on_type;
  _swith_on_type swith_on;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _end_pose_type;
  _end_pose_type end_pose;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _joint_pos_type;
  _joint_pos_type joint_pos;





  typedef boost::shared_ptr< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlanSwitchRequest_

typedef ::iserve_srvs::PlanSwitchRequest_<std::allocator<void> > PlanSwitchRequest;

typedef boost::shared_ptr< ::iserve_srvs::PlanSwitchRequest > PlanSwitchRequestPtr;
typedef boost::shared_ptr< ::iserve_srvs::PlanSwitchRequest const> PlanSwitchRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator2> & rhs)
{
  return lhs.swith_on == rhs.swith_on &&
    lhs.end_pose == rhs.end_pose &&
    lhs.joint_pos == rhs.joint_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator1> & lhs, const ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace iserve_srvs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cf446b28b6ddff4476cb5d9001a7e9a";
  }

  static const char* value(const ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cf446b28b6ddff4ULL;
  static const uint64_t static_value2 = 0x476cb5d9001a7e9aULL;
};

template<class ContainerAllocator>
struct DataType< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "iserve_srvs/PlanSwitchRequest";
  }

  static const char* value(const ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#indicate start or stop plan\n"
"bool swith_on\n"
"float64[] end_pose\n"
"float64[] joint_pos\n"
;
  }

  static const char* value(const ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.swith_on);
      stream.next(m.end_pose);
      stream.next(m.joint_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanSwitchRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::iserve_srvs::PlanSwitchRequest_<ContainerAllocator>& v)
  {
    s << indent << "swith_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.swith_on);
    s << indent << "end_pose[]" << std::endl;
    for (size_t i = 0; i < v.end_pose.size(); ++i)
    {
      s << indent << "  end_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.end_pose[i]);
    }
    s << indent << "joint_pos[]" << std::endl;
    for (size_t i = 0; i < v.joint_pos.size(); ++i)
    {
      s << indent << "  joint_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ISERVE_SRVS_MESSAGE_PLANSWITCHREQUEST_H
