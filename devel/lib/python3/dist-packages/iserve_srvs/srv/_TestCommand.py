# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iserve_srvs/TestCommandRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TestCommandRequest(genpy.Message):
  _md5sum = "5fa6b05583c7b8dd0dddb40da0b1f6ba"
  _type = "iserve_srvs/TestCommandRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#noiseTest, motionStabilityTest, loadTest, jointAngleTest, accuracyTest, powTest, breakTest, motionTest, goHome
string testItem

bool isLoad
bool isSingleJoint

#0, 1, 2, 3, 4, 5
int32 jointNo

# at least 1
int32 cycleTimes
float64 velocity

# 1, 2, 3, 4, 5
int32 pointIndex

#toShelf, toLocker, goHome
string segmentNo

int32 startIndex
int32 endIndex
"""
  __slots__ = ['testItem','isLoad','isSingleJoint','jointNo','cycleTimes','velocity','pointIndex','segmentNo','startIndex','endIndex']
  _slot_types = ['string','bool','bool','int32','int32','float64','int32','string','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       testItem,isLoad,isSingleJoint,jointNo,cycleTimes,velocity,pointIndex,segmentNo,startIndex,endIndex

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TestCommandRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.testItem is None:
        self.testItem = ''
      if self.isLoad is None:
        self.isLoad = False
      if self.isSingleJoint is None:
        self.isSingleJoint = False
      if self.jointNo is None:
        self.jointNo = 0
      if self.cycleTimes is None:
        self.cycleTimes = 0
      if self.velocity is None:
        self.velocity = 0.
      if self.pointIndex is None:
        self.pointIndex = 0
      if self.segmentNo is None:
        self.segmentNo = ''
      if self.startIndex is None:
        self.startIndex = 0
      if self.endIndex is None:
        self.endIndex = 0
    else:
      self.testItem = ''
      self.isLoad = False
      self.isSingleJoint = False
      self.jointNo = 0
      self.cycleTimes = 0
      self.velocity = 0.
      self.pointIndex = 0
      self.segmentNo = ''
      self.startIndex = 0
      self.endIndex = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.testItem
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2idi().pack(_x.isLoad, _x.isSingleJoint, _x.jointNo, _x.cycleTimes, _x.velocity, _x.pointIndex))
      _x = self.segmentNo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.startIndex, _x.endIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.testItem = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.testItem = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.isLoad, _x.isSingleJoint, _x.jointNo, _x.cycleTimes, _x.velocity, _x.pointIndex,) = _get_struct_2B2idi().unpack(str[start:end])
      self.isLoad = bool(self.isLoad)
      self.isSingleJoint = bool(self.isSingleJoint)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.segmentNo = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.segmentNo = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.startIndex, _x.endIndex,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.testItem
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B2idi().pack(_x.isLoad, _x.isSingleJoint, _x.jointNo, _x.cycleTimes, _x.velocity, _x.pointIndex))
      _x = self.segmentNo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2i().pack(_x.startIndex, _x.endIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.testItem = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.testItem = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.isLoad, _x.isSingleJoint, _x.jointNo, _x.cycleTimes, _x.velocity, _x.pointIndex,) = _get_struct_2B2idi().unpack(str[start:end])
      self.isLoad = bool(self.isLoad)
      self.isSingleJoint = bool(self.isSingleJoint)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.segmentNo = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.segmentNo = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.startIndex, _x.endIndex,) = _get_struct_2i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2idi = None
def _get_struct_2B2idi():
    global _struct_2B2idi
    if _struct_2B2idi is None:
        _struct_2B2idi = struct.Struct("<2B2idi")
    return _struct_2B2idi
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from iserve_srvs/TestCommandResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TestCommandResponse(genpy.Message):
  _md5sum = "7ed57eefe99697913fd727b43196556f"
  _type = "iserve_srvs/TestCommandResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
string testItem
bool isLoad
int32 cycleTimes
float64 velocity
bool isSingleJoint
int32 jointNo
string segmentNo
int32 pointIndex
int32 startIndex
int32 endIndex



"""
  __slots__ = ['success','testItem','isLoad','cycleTimes','velocity','isSingleJoint','jointNo','segmentNo','pointIndex','startIndex','endIndex']
  _slot_types = ['bool','string','bool','int32','float64','bool','int32','string','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,testItem,isLoad,cycleTimes,velocity,isSingleJoint,jointNo,segmentNo,pointIndex,startIndex,endIndex

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TestCommandResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.testItem is None:
        self.testItem = ''
      if self.isLoad is None:
        self.isLoad = False
      if self.cycleTimes is None:
        self.cycleTimes = 0
      if self.velocity is None:
        self.velocity = 0.
      if self.isSingleJoint is None:
        self.isSingleJoint = False
      if self.jointNo is None:
        self.jointNo = 0
      if self.segmentNo is None:
        self.segmentNo = ''
      if self.pointIndex is None:
        self.pointIndex = 0
      if self.startIndex is None:
        self.startIndex = 0
      if self.endIndex is None:
        self.endIndex = 0
    else:
      self.success = False
      self.testItem = ''
      self.isLoad = False
      self.cycleTimes = 0
      self.velocity = 0.
      self.isSingleJoint = False
      self.jointNo = 0
      self.segmentNo = ''
      self.pointIndex = 0
      self.startIndex = 0
      self.endIndex = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.testItem
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BidBi().pack(_x.isLoad, _x.cycleTimes, _x.velocity, _x.isSingleJoint, _x.jointNo))
      _x = self.segmentNo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.pointIndex, _x.startIndex, _x.endIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.testItem = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.testItem = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.isLoad, _x.cycleTimes, _x.velocity, _x.isSingleJoint, _x.jointNo,) = _get_struct_BidBi().unpack(str[start:end])
      self.isLoad = bool(self.isLoad)
      self.isSingleJoint = bool(self.isSingleJoint)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.segmentNo = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.segmentNo = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pointIndex, _x.startIndex, _x.endIndex,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.testItem
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BidBi().pack(_x.isLoad, _x.cycleTimes, _x.velocity, _x.isSingleJoint, _x.jointNo))
      _x = self.segmentNo
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3i().pack(_x.pointIndex, _x.startIndex, _x.endIndex))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.testItem = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.testItem = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.isLoad, _x.cycleTimes, _x.velocity, _x.isSingleJoint, _x.jointNo,) = _get_struct_BidBi().unpack(str[start:end])
      self.isLoad = bool(self.isLoad)
      self.isSingleJoint = bool(self.isSingleJoint)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.segmentNo = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.segmentNo = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pointIndex, _x.startIndex, _x.endIndex,) = _get_struct_3i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3i = None
def _get_struct_3i():
    global _struct_3i
    if _struct_3i is None:
        _struct_3i = struct.Struct("<3i")
    return _struct_3i
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BidBi = None
def _get_struct_BidBi():
    global _struct_BidBi
    if _struct_BidBi is None:
        _struct_BidBi = struct.Struct("<BidBi")
    return _struct_BidBi
class TestCommand(object):
  _type          = 'iserve_srvs/TestCommand'
  _md5sum = '56cbc0917dc3153d523ed8899f37edfb'
  _request_class  = TestCommandRequest
  _response_class = TestCommandResponse
